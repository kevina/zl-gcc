# type decls
(talias FILE (struct _IO_FILE))
(talias size_t (unsigned-int))
(talias bool (int))
(talias EnvironSnapshot (struct EnvironSnapshot))
(talias Mark (struct Mark))
(.struct UnmarkedSyntax)
(.struct Syntax)
(.struct SyntaxList)
(.struct SyntaxEnum)
(.struct Match)
(talias Context (struct Context))
(talias Environ (struct Environ))
(.enum _s_0_)
(talias Position (enum _s_0_))
(.struct UserTypeInfo)
(.struct ModuleInfo)
(.struct _Data$$1)
# type definitions
(.enum _s_0_
   (NoPos 0)
   (OtherPos 1)
   (TopLevel 2)
   (FieldPos 4)
   (StmtDeclPos 8)
   (StmtPos 16)
   (ExpPos 32)
)
(.struct _Data$$1
  ((.ptr (int)) data)
  ((size_t) sz)
)
# function decls
(fun printf (. ((.ptr (char :const)) ) ...) (int))
(fun snprintf (. ((.ptr (char :const)) str) ((size_t) size) ((.ptr (char :const)) format) ...) (int))
(fun strcmp (. ((.ptr (char :const)) s1) ((.ptr (char :const)) s2)) (int))
(fun parse_class (. ((.ptr (struct Syntax)) p) ((.ptr (Environ)) env)) (.ptr (struct Syntax)))
(fun begin$$1 (. ((.ptr (struct _Data$$1)) this$1)) (.ptr (int)))
(fun end$$1 (. ((.ptr (struct _Data$$1)) this$1)) (.ptr (int)))
(fun main (.) (int))
# definitions
(fun begin$$1 (. ((.ptr (struct _Data$$1)) this$1)) (.ptr (int)) (block
  (return (member (deref this$1) data))
)
)
(fun end$$1 (. ((.ptr (struct _Data$$1)) this$1)) (.ptr (int)) (block
  (return (plus (member (deref this$1) data) (member (deref this$1) sz)))
)
)
(fun main (.) (int) (block
  (var x$1 (struct _Data$$1))
  (var d$1 (.array (int) 4) (.
    1
    5
    3
    2
  ))
  (assign (member x$1 data) d$1)
  (assign (member x$1 sz) (cast (size_t) 4))
  (var what$1 (.ptr (struct _Data$$1)) (addrof x$1))
  (var i$1 (.ptr (int)) (call begin$$1 (. (addrof (deref what$1)))))
  (var e$1 (.ptr (int)) (call end$$1 (. (addrof (deref what$1)))))
  (block
    (local_label break$1)
    (local_label continue$1)
    (noop)
  (label loop$$1)
    (if (not (ne i$1 e$1))
      (goto break$1)
    )
    (block
      (var el$1 (.ptr (int)) (addrof (deref i$1)))
      (block
        (call printf (. (s "%d\n") (deref el$1)))
      )
    )
  (label continue$1)
    (eblock      (c-assign plus i$1 1)
    )
    (goto loop$$1)
  (label break$1)
  )
)
)
# special
# done
