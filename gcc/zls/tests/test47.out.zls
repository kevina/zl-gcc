# type decls
(talias FILE (struct _IO_FILE))
(talias size_t (unsigned-int))
(talias bool (int))
(talias EnvironSnapshot (struct EnvironSnapshot))
(talias Mark (struct Mark))
(.struct UnmarkedSyntax)
(.struct Syntax)
(.struct SyntaxList)
(.struct SyntaxEnum)
(.struct Match)
(talias Context (struct Context))
(talias Environ (struct Environ))
(.enum _s_0_)
(talias Position (enum _s_0_))
(.struct UserTypeInfo)
(.struct ModuleInfo)
(.struct _Data$$1)
(.struct _Data$$2)
(.struct _Data$$3)
# type definitions
(.enum _s_0_
   (NoPos 0)
   (OtherPos 1)
   (TopLevel 2)
   (FieldPos 4)
   (StmtDeclPos 8)
   (StmtPos 16)
   (ExpPos 32)
)
(.struct _Data$$1
  ((int) x)
  ((int) y)
)
(.struct _Data$$2
  ((struct _Data$$1) parent)
  ((int) z)
)
(.struct _Data$$3
  ((struct _Data$$2) parent)
  ((int) z2)
)
# function decls
(fun printf (. ((.ptr (char :const)) ) ...) (int))
(fun snprintf (. ((.ptr (char :const)) str) ((size_t) size) ((.ptr (char :const)) format) ...) (int))
(fun strcmp (. ((.ptr (char :const)) s1) ((.ptr (char :const)) s2)) (int))
(fun parse_class (. ((.ptr (struct Syntax)) p) ((.ptr (Environ)) env)) (.ptr (struct Syntax)))
(fun foo_p (. ((.ptr (struct _Data$$1)) p)) (void))
(fun foo_c (. ((.ptr (struct _Data$$2)) p)) (void))
(fun foo_s (. ((.ptr (struct _Data$$3)) p)) (void))
(fun main (.) (int))
# definitions
(fun foo_p (. ((.ptr (struct _Data$$1)) p)) (void) (block
  (noop)
)
)
(fun foo_c (. ((.ptr (struct _Data$$2)) p)) (void) (block
  (noop)
)
)
(fun foo_s (. ((.ptr (struct _Data$$3)) p)) (void) (block
  (noop)
)
)
(fun main (.) (int) (block
  (var p$1 (struct _Data$$1))
  (call foo_p (. (addrof p$1)))
  (var c$1 (struct _Data$$2))
  (call foo_c (. (addrof c$1)))
  (call foo_p (. (addrof (member c$1 parent))))
  (var s$1 (struct _Data$$3))
  (call foo_s (. (addrof s$1)))
  (call foo_c (. (addrof (member s$1 parent))))
  (call foo_p (. (addrof (member (member s$1 parent) parent))))
  (member p$1 x)
  (member p$1 y)
  (member c$1 z)
  (member (deref (cast (.ptr (struct _Data$$1)) (addrof c$1))) x)
  (member (deref (cast (.ptr (struct _Data$$1)) (addrof c$1))) y)
  (member s$1 z2)
  (member (deref (cast (.ptr (struct _Data$$2)) (addrof s$1))) z)
  (member (deref (cast (.ptr (struct _Data$$1)) (addrof s$1))) x)
  (member (deref (cast (.ptr (struct _Data$$1)) (addrof s$1))) y)
  (return 0)
)
)
# special
# done
