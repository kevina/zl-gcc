# type decls
(talias FILE (struct _IO_FILE))
(talias size_t (unsigned-int))
(talias bool (int))
(talias EnvironSnapshot (struct EnvironSnapshot))
(talias Mark (struct Mark))
(.struct UnmarkedSyntax)
(.struct Syntax)
(.struct SyntaxList)
(.struct SyntaxEnum)
(.struct Match)
(talias Context (struct Context))
(talias Environ (struct Environ))
(.enum _s_0_)
(talias Position (enum _s_0_))
(.struct UserTypeInfo)
(.struct ModuleInfo)
(.struct s1)
(talias s1 (struct s1))
(.struct s2$$1)
(talias s2$$2 (struct s2$$1))
# type definitions
(.enum _s_0_
   (NoPos 0)
   (OtherPos 1)
   (TopLevel 2)
   (FieldPos 4)
   (StmtDeclPos 8)
   (StmtPos 16)
   (ExpPos 32)
)
(.struct s1
  ((int) x)
  ((int) y)
)
(.struct s2$$1
  ((int) x)
  ((int) y)
)
# function decls
(fun printf (. ((.ptr (char :const)) ) ...) (int))
(fun snprintf (. ((.ptr (char :const)) str) ((size_t) size) ((.ptr (char :const)) format) ...) (int))
(fun strcmp (. ((.ptr (char :const)) s1) ((.ptr (char :const)) s2)) (int))
(fun parse_class (. ((.ptr (struct Syntax)) p) ((.ptr (Environ)) env)) (.ptr (struct Syntax)))
(fun foo (. ((int) x) ((int) y)) (int))
(fun main (.) (int))
# definitions
(var x (int) 20)
(fun foo (. ((int) x) ((int) y)) (int) (block
  (block
    (var x$1 (int) 20)
    (if 0
      (return (plus x$1 y))
      (goto x$$1)
    )
  )
  (return (plus x y))
  (var x$1 (int) 2)
(label x$$1)
  (return 10)
)
)
(fun main (.) (int) (block
  (var v1$1 (s1))
  (var v2$1 (s2$$2))
  (return (plus (plus (member v1$1 x) (member v2$1 y)) (call foo (. 2 3))))
)
)
# special
# done
